name: Mise en place Ansible sur GoogleCloud

on:
  push:
    branches:
      - CI/CD-P51
  workflow_dispatch:

jobs:
  mise-a-jour-vm:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Install Google Cloud CLI
        run: |
          sudo apt-get update && sudo apt-get install -y google-cloud-cli

      - name: SSH into VMs and Update System
        run: |
          for vm in k3s-master k3s-node-0 k3s-node-1 k3s-node-2; do
            gcloud compute ssh $vm --zone europe-west1-b --command "sudo dnf update -y" --quiet
          done

  installation-ansible:
    runs-on: ubuntu-latest
    needs: mise-a-jour-vm

    steps:
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Install Ansible on all VMs
        run: |
          for vm in k3s-master k3s-node-0 k3s-node-1 k3s-node-2; do
            gcloud compute ssh $vm --zone europe-west1-b --command "sudo dnf install -y epel-release && sudo dnf config-manager --set-enabled crb && sudo dnf install -y ansible" --quiet
          done

      - name: Create Ansible User on All VMs
        run: |
          for vm in k3s-master k3s-node-0 k3s-node-1 k3s-node-2; do
            gcloud compute ssh $vm --zone europe-west1-b --command "
              if ! id 'ansible' &>/dev/null; then
                sudo useradd -m -s /bin/bash ansible
                echo 'ansible ALL=(ALL) NOPASSWD:ALL' | sudo tee /etc/sudoers.d/ansible
                sudo mkdir -p /home/ansible/.ssh

                # Vérifie si ~/.ssh/authorized_keys existe, sinon crée un fichier vide
                if [ -f ~/.ssh/authorized_keys ]; then
                  sudo cp ~/.ssh/authorized_keys /home/ansible/.ssh/
                else
                  sudo touch /home/ansible/.ssh/authorized_keys
                fi

                sudo chown -R ansible:ansible /home/ansible/.ssh
                sudo chmod 700 /home/ansible/.ssh
                sudo chmod 600 /home/ansible/.ssh/authorized_keys
              fi
            " --quiet
          done

          
   
     
      - name: Generate SSH key for Ansible user on k3s-master (if not exists or empty)
        run: |
          gcloud compute ssh k3s-master --zone europe-west1-b --command "
            if [ ! -s /home/ansible/.ssh/id_rsa ]; then
              sudo rm -f /home/ansible/.ssh/id_rsa /home/ansible/.ssh/id_rsa.pub
              sudo -u ansible ssh-keygen -t rsa -b 4096 -N '' -f /home/ansible/.ssh/id_rsa <<< y
            fi
          "

      - name: Ensure SSH public key is on all nodes
        run: |
          PUB_KEY=$(gcloud compute ssh k3s-master --zone europe-west1-b --command "sudo cat /home/ansible/.ssh/id_rsa.pub")
          for vm in k3s-master k3s-node-0 k3s-node-1 k3s-node-2; do
            gcloud compute ssh $vm --zone europe-west1-b --command "
              if ! grep -q '$PUB_KEY' /home/ansible/.ssh/authorized_keys; then
                echo '$PUB_KEY' | sudo tee -a /home/ansible/.ssh/authorized_keys
                sudo chown -R ansible:ansible /home/ansible/.ssh
                sudo chmod 700 /home/ansible/.ssh
                sudo chmod 600 /home/ansible/.ssh/authorized_keys
              fi
            "
          done

      - name: Configure Ansible inventory
        run: |
          echo "[k3s_cluster]" > inventory.ini
          echo "k3s-master ansible_host=10.0.0.3 ansible_user=ansible" >> inventory.ini
          echo "k3s-node-0 ansible_host=10.0.0.2 ansible_user=ansible" >> inventory.ini
          echo "k3s-node-1 ansible_host=10.0.0.5 ansible_user=ansible" >> inventory.ini
          echo "k3s-node-2 ansible_host=10.0.0.6 ansible_user=ansible" >> inventory.ini
          sudo mkdir -p /etc/ansible
          sudo mv inventory.ini /etc/ansible/inventory.ini
          cat /etc/ansible/inventory.ini

      - name: Configure Ansible to use the inventory automatically
        run: |
          echo "[defaults]" > ansible.cfg
          echo "inventory = /etc/ansible/inventory.ini" >> ansible.cfg
          sudo mv ansible.cfg /etc/ansible/ansible.cfg
          cat /etc/ansible/ansible.cfg

      - name: Verify Ansible installation on k3s-master
        run: |
          gcloud compute ssh k3s-master --zone europe-west1-b --command "ansible --version"

  frontend:
    runs-on: ubuntu-latest
    needs: installation-ansible

    steps:
      - name: Deploy Frontend Application
        run: |
          echo "Deploying Frontend..."

  backend:
    runs-on: ubuntu-latest
    needs: installation-ansible

    steps:
      - name: Deploy Backend Application
        run: |
          echo "Deploying Backend..."
    
  deploy-postgres-k3s:
    runs-on: ubuntu-latest
    needs: backend  # Lancer après backend
  
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Authenticate to GCP
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

    - name: Copy Kubernetes manifests to k3s-master
      run: |
        gcloud compute scp -r k3s/postgresql-ha.yaml k3s-master:~/ --zone europe-west1-b

    - name: Deploy PostgreSQL HA on K3s
      run: |
        gcloud compute ssh k3s-master --zone europe-west1-b --command "
          export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
          kubectl apply -f ~/postgresql-ha.yaml
        "

    - name: Wait for PostgreSQL Pods to be Ready
      run: |
        gcloud compute ssh k3s-master --zone europe-west1-b --command "
          export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
          kubectl wait --for=condition=ready pod -l app=postgres -n database --timeout=120s
        "

    - name: Verify PostgreSQL Deployment
      run: |
        gcloud compute ssh k3s-master --zone europe-west1-b --command "
          export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
          kubectl get pods -n database
        "
