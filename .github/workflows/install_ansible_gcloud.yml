name: Mise en place Ansible sur GoogleCloud

on:
  push:
    branches:
      - CI/CD-P51
  workflow_dispatch:

jobs:
  mise-a-jour-vm:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Install Google Cloud CLI
        run: |
          sudo apt-get update && sudo apt-get install -y google-cloud-cli
      - name: SSH into VMs and Update System
        run: |
          for vm in k3s-master k3s-node-0 k3s-node-1 k3s-node-2; do
            gcloud compute ssh $vm --zone europe-west1-b --command "sudo dnf update -y" --quiet
          done
  installation-ansible:
    runs-on: ubuntu-latest
    needs: mise-a-jour-vm

    steps:
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Install Ansible on all VMs
        run: |
          for vm in k3s-master k3s-node-0 k3s-node-1 k3s-node-2; do
            gcloud compute ssh $vm --zone europe-west1-b --command "sudo dnf install -y epel-release && sudo dnf config-manager --set-enabled crb && sudo dnf install -y ansible" --quiet
          done
      - name: Create Ansible User on All VMs
        run: |
          for vm in k3s-master k3s-node-0 k3s-node-1; do
            gcloud compute ssh $vm --zone europe-west1-b --command "
              if ! id 'ansible' &>/dev/null; then
                sudo useradd -m -s /bin/bash ansible
                echo 'ansible ALL=(ALL) NOPASSWD:ALL' | sudo tee /etc/sudoers.d/ansible
                sudo mkdir -p /home/ansible/.ssh
                # VÃ©rifie si ~/.ssh/authorized_keys existe, sinon crÃ©e un fichier vide
                if [ -f ~/.ssh/authorized_keys ]; then
                  sudo cp ~/.ssh/authorized_keys /home/ansible/.ssh/
                else
                  sudo touch /home/ansible/.ssh/authorized_keys
                fi
                sudo chown -R ansible:ansible /home/ansible/.ssh
                sudo chmod 700 /home/ansible/.ssh
                sudo chmod 600 /home/ansible/.ssh/authorized_keys
              fi
            " --quiet
          done
      - name: Configure Ansible inventory
        run: |
          echo "[k3s_cluster]" > inventory.ini
          echo "k3s-master ansible_host=10.0.0.3 ansible_user=ansible" >> inventory.ini
          echo "k3s-node-0 ansible_host=10.0.0.2 ansible_user=ansible" >> inventory.ini
          echo "k3s-node-1 ansible_host=10.0.0.5 ansible_user=ansible" >> inventory.ini
          echo "k3s-node-2 ansible_host=10.0.0.6 ansible_user=ansible" >> inventory.ini
          sudo mkdir -p /etc/ansible
          sudo mv inventory.ini /etc/ansible/inventory.ini
          cat /etc/ansible/inventory.ini
      - name: Configure Ansible to use the inventory automatically
        run: |
          echo "[defaults]" > ansible.cfg
          echo "inventory = /etc/ansible/inventory.ini" >> ansible.cfg
          sudo mv ansible.cfg /etc/ansible/ansible.cfg
          cat /etc/ansible/ansible.cfg
      - name: Verify Ansible installation on k3s-master
        run: |
          gcloud compute ssh k3s-master --zone europe-west1-b --command "ansible --version"
  frontend:
    runs-on: ubuntu-latest
    needs: installation-ansible

    steps:
      - name: Deploy Frontend Application
        run: |
          echo "Deploying Frontend..."
  backend:
    runs-on: ubuntu-latest
    needs: installation-ansible

    steps:
      - name: Deploy Backend Application
        run: |
          echo "Deploying Backend..."

  postgresql-patroni:
    runs-on: ubuntu-latest
    needs: backend
    steps:
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Deploy PostgreSQL HA with Patroni
        run: |
          gcloud compute ssh k3s-master --zone europe-west1-b --command "
            set -e
            echo 'ðŸ”¹ Mise en place de PostgreSQL HA avec Patroni'
            
            # Installation des dÃ©pendances
            sudo dnf install -y postgresql15 postgresql15-server python3-pip
            
            # Installation de Patroni
            sudo pip3 install patroni psycopg2
            
            # Configuration du fichier patroni.yml
            cat <<EOF | sudo tee /etc/patroni.yml
            scope: postgresql-ha
            namespace: /postgresql-ha/
            name: k3s-master

            restapi:
              listen: 0.0.0.0:8008
              connect_address: 10.0.0.3:8008

            raft:
              self_addr: 10.0.0.3:2222
              partner_addrs:
                - 10.0.0.2:2222
                - 10.0.0.5:2222

            postgresql:
              listen: 0.0.0.0:5432
              connect_address: 10.0.0.9:5432
              data_dir: /var/lib/postgresql/15/main
              bin_dir: /usr/lib/postgresql/15/bin
              authentication:
                replication:
                  username: replicator
                  password: replication_password
                superuser:
                  username: postgres
                  password: postgres_password
                rewind:
                  username: rewind_user
                  password: rewind_password
              parameters:
                wal_level: replica
                hot_standby: 'on'
                max_wal_senders: 10
                max_replication_slots: 10
                synchronous_commit: 'on'
            EOF
            
            # CrÃ©ation et permission des fichiers
            sudo chown -R postgres:postgres /var/lib/postgresql
            sudo chmod 600 /etc/patroni.yml

            # DÃ©marrage de Patroni
            sudo -u postgres nohup /usr/local/bin/patroni /etc/patroni.yml > /var/log/patroni.log 2>&1 &
            sleep 5

            # VÃ©rification du cluster
            sudo -u postgres /usr/local/bin/patronictl list
          "
